{"version":3,"sources":["components/Carousel/Carousel.tsx","components/CarouselForm/CarouselForm.tsx","App.tsx","index.tsx"],"names":["Carousel","images","frameSize","step","itemWidth","infiniteLoop","useState","currentIndex","setCurrentIndex","transitionEnabled","setTransitionEnabled","useEffect","length","extraPrev","output","index","push","reverse","renderExtraPrev","extraNext","renderExtraNext","className","type","disabled","onClick","prevState","style","width","transform","transition","undefined","onTransitionEnd","map","item","src","alt","image","maxIndex","CarouselForm","setFrameSize","setStep","setItemWidth","setInfiniteLoop","htmlFor","id","name","min","max","value","onChange","e","target","checked","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34ea74e6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  infiniteLoop: boolean;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images, frameSize, step, itemWidth, infiniteLoop,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [transitionEnabled, setTransitionEnabled] = useState(true);\n\n  useEffect(() => {\n    if (infiniteLoop) {\n      if (currentIndex === frameSize || currentIndex === images.length) {\n        setTransitionEnabled(true);\n      }\n    }\n  }, [currentIndex, infiniteLoop, frameSize, images.length]);\n\n  const next = () => {\n    const maxIndex = (infiniteLoop) ? images.length + frameSize : images.length - frameSize;\n\n    if (currentIndex + step > maxIndex) {\n      setCurrentIndex(maxIndex);\n    } else {\n      setCurrentIndex(prevState => prevState + step);\n    }\n  };\n\n  const prev = () => {\n    if (infiniteLoop || currentIndex > 0) {\n      if (currentIndex - step < 0) {\n        setCurrentIndex(0);\n      } else {\n        setCurrentIndex(prevState => prevState - step);\n      }\n    }\n  };\n\n  const handleTransitionEnd = () => {\n    if (infiniteLoop) {\n      if (currentIndex === 0) {\n        setTransitionEnabled(false);\n        setCurrentIndex(images.length);\n      } else if (currentIndex === images.length + frameSize) {\n        setTransitionEnabled(false);\n        setCurrentIndex(frameSize);\n      }\n    }\n  };\n\n  const renderExtraPrev = () => {\n    const output = [];\n\n    for (let index = 0; index < frameSize; index += 1) {\n      output.push(images[images.length - 1 - index]);\n    }\n\n    output.reverse();\n\n    return output;\n  };\n\n  const extraPrev = renderExtraPrev();\n\n  const renderExtraNext = () => {\n    const output = [];\n\n    for (let index = 0; index < frameSize; index += 1) {\n      output.push(images[index]);\n    }\n\n    return output;\n  };\n\n  const extraNext = renderExtraNext();\n\n  return (\n    <div className=\"carousel-container\">\n      <div className=\"carousel-wrapper\">\n        <button\n          type=\"button\"\n          className=\"button-arrow\"\n          disabled={currentIndex <= 0 && !infiniteLoop}\n          onClick={prev}\n        >\n          &lt;\n        </button>\n        <div\n          className=\"carousel-content-wrapper\"\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          <div\n            className={`carousel-content item-count-${frameSize}`}\n            style={{\n              transform: `translateX(-${currentIndex * (100 / frameSize)}%)`,\n              transition: !transitionEnabled ? 'none' : undefined,\n            }}\n            onTransitionEnd={() => handleTransitionEnd()}\n          >\n            {infiniteLoop && extraPrev.map(item => (\n              <img\n                key={`${item}`}\n                src={`${item}`}\n                alt=\"smiley\"\n              />\n            ))}\n            {images.map(image => (\n              <img\n                key={`${image}`}\n                src={`${image}`}\n                alt=\"smiley\"\n              />\n            ))}\n            {infiniteLoop && extraNext.map(item => (\n              <img\n                key={`${item}`}\n                src={`${item}`}\n                alt=\"smiley\"\n              />\n            ))}\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"button-arrow\"\n          disabled={currentIndex >= images.length - frameSize && !infiniteLoop}\n          onClick={next}\n        >\n          &gt;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport Carousel from '../Carousel/Carousel';\nimport './CarouselForm.scss';\n\ntype Props = {\n  images: string[];\n};\n\nconst CarouselForm: React.FC<Props> = ({ images }) => {\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [infiniteLoop, setInfiniteLoop] = useState(false);\n\n  return (\n    <>\n      <Carousel\n        images={images}\n        frameSize={frameSize}\n        step={step}\n        itemWidth={itemWidth}\n        infiniteLoop={infiniteLoop}\n      />\n      <form className=\"form\">\n        <label\n          className=\"label\"\n          htmlFor=\"step\"\n        >\n          Step:\n          {' '}\n          <input\n            type=\"number\"\n            className=\"input__number\"\n            id=\"step\"\n            name=\"step\"\n            min={1}\n            max={frameSize}\n            value={step}\n            onChange={e => setStep(+e.target.value)}\n          />\n        </label>\n        <label\n          className=\"label\"\n          htmlFor=\"frameSize\"\n        >\n          Frame Size:\n          {' '}\n          <input\n            type=\"number\"\n            className=\"input__number\"\n            id=\"frameSize\"\n            name=\"frameSize\"\n            min={1}\n            max={5}\n            value={frameSize}\n            onChange={e => setFrameSize(+e.target.value)}\n          />\n        </label>\n        <label\n          className=\"label\"\n          htmlFor=\"itemWidth\"\n        >\n          Item Width:\n          {' '}\n          <input\n            type=\"range\"\n            className=\"input__range\"\n            id=\"itemWidth\"\n            name=\"itemWidth\"\n            min={100}\n            max={200}\n            value={itemWidth}\n            onChange={e => setItemWidth(+e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"infinite\">\n          Infinite:\n          {' '}\n          <input\n            type=\"checkbox\"\n            className=\"input__checkbox\"\n            id=\"infinite\"\n            name=\"infinite\"\n            checked={infiniteLoop}\n            onChange={e => setInfiniteLoop(e.target.checked)}\n          />\n        </label>\n      </form>\n    </>\n  );\n};\n\nexport default CarouselForm;\n","import React from 'react';\nimport './App.scss';\nimport CarouselForm from './components/CarouselForm/CarouselForm';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CarouselForm images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}